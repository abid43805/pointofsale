/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pos.forms.pointofsale;

import com.pos.beans.Customer;
import com.pos.beans.Products;
import com.pos.beans.SaleDetail;
import com.pos.beans.Sales;
import com.pos.forms.loginform.LoginForm;
import com.pos.forms.pointofsale.service.PointOfSaleService;
import com.pos.forms.stocks.stocksservice.StocksService;
import com.pos.utils.AbstractActionImpl;
import com.pos.utils.BillPrintable;
import com.pos.utils.ButtonColumn;
import com.pos.utils.DBUtils;
import com.sun.org.apache.xalan.internal.xsltc.runtime.BasisLibrary;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AbidAli
 */
public class PointOfSaleForm extends javax.swing.JFrame {
    List<Products> listOfProducts;
    Vector<Long> idsVectorOfProducts = new Vector<Long>();
    List<Customer> listOfCustomers;
    Vector<Long> idsVectorOfCustomers = new Vector<Long>();
    List<SaleDetail> listOfSaleDetail = new ArrayList<SaleDetail>();
    
    /**
     * Creates new form PointOfSaleForm
     */
    public PointOfSaleForm() {
        PointOfSaleService posService = new PointOfSaleService();
        listOfProducts = posService.fetchProductsList();
        
        StocksService stockService = new StocksService();
        listOfCustomers = stockService.fetchCustomersList();
        
        initComponents();
        txt_SaleId.setText(""+(posService.calculateSaleId()+1));
        DBUtils.addItemsToCombo(cmb_Products, listOfProducts, "Select Product", idsVectorOfProducts);
        DBUtils.addItemsToCombo(cmb_Customer, listOfCustomers, "Walk In Customer", idsVectorOfCustomers);
        txt_BarCodeField.requestFocus();
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bill_system1 = new bill_system.Bill_system();
        pnl_SalePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_AddToDetail = new javax.swing.JButton();
        txt_SaleId = new javax.swing.JTextField();
        txt_Quantity = new com.pos.utils.IntegerField();
        txt_Price = new javax.swing.JTextField();
        txt_SubTotal = new javax.swing.JTextField();
        cmb_Customer = new javax.swing.JComboBox();
        cmb_Products = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        lbl_RemainingQuantity = new javax.swing.JLabel();
        btn_ClearCart = new javax.swing.JButton();
        txt_BarCodeField = new javax.swing.JTextField();
        pnl_PaymentPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_AmountDue = new javax.swing.JTextField();
        txt_AmountChange = new javax.swing.JTextField();
        txt_AmountPaid = new com.pos.utils.IntegerField();
        btn_SaleCommit = new javax.swing.JButton();
        pnl_SaleDetailPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_SaleDetail = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnl_SalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Sale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel1.setText("Customer :");

        jLabel2.setText("Sale ID :");

        jLabel3.setText("Product :");

        jLabel4.setText("Price :");

        jLabel5.setText("Quantity :");

        jLabel6.setText("Subtotal :");

        btn_AddToDetail.setText("Add To Cart");
        btn_AddToDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddToDetailActionPerformed(evt);
            }
        });

        txt_Quantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_QuantityFocusLost(evt);
            }
        });
        txt_Quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_QuantityActionPerformed(evt);
            }
        });

        txt_Price.setEditable(false);

        txt_SubTotal.setEditable(false);

        cmb_Products.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ProductsActionPerformed(evt);
            }
        });

        jLabel10.setText("Quantity Remaining:");

        btn_ClearCart.setText("Clear Cart");
        btn_ClearCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ClearCartActionPerformed(evt);
            }
        });

        txt_BarCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BarCodeFieldActionPerformed(evt);
            }
        });
        txt_BarCodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_BarCodeFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnl_SalePanelLayout = new javax.swing.GroupLayout(pnl_SalePanel);
        pnl_SalePanel.setLayout(pnl_SalePanelLayout);
        pnl_SalePanelLayout.setHorizontalGroup(
            pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addGap(30, 30, 30)
                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_Quantity)
                    .addComponent(txt_Price)
                    .addComponent(txt_SaleId)
                    .addComponent(txt_SubTotal)
                    .addComponent(cmb_Products, 0, 134, Short.MAX_VALUE)
                    .addComponent(cmb_Customer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txt_BarCodeField))
                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(btn_ClearCart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_AddToDetail)
                        .addContainerGap())
                    .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_RemainingQuantity)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnl_SalePanelLayout.setVerticalGroup(
            pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                        .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmb_Customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_SaleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_BarCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_Products, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(3, 3, 3)))
                                .addGap(18, 18, 18)
                                .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txt_Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel10)
                                        .addComponent(lbl_RemainingQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(9, 9, 9)))
                                .addComponent(txt_SubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_SalePanelLayout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel6)))
                        .addGap(15, 28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_SalePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnl_SalePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_AddToDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_ClearCart, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jLabel10.getAccessibleContext().setAccessibleDescription("");

        pnl_PaymentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Summary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 18), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel7.setText("Amount Due :");

        jLabel8.setText("Amount Paid :");

        jLabel9.setText("Amount Change :");

        txt_AmountDue.setEditable(false);

        txt_AmountChange.setEditable(false);

        txt_AmountPaid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_AmountPaidFocusLost(evt);
            }
        });
        txt_AmountPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_AmountPaidActionPerformed(evt);
            }
        });

        btn_SaleCommit.setText("Commit");
        btn_SaleCommit.setEnabled(false);
        btn_SaleCommit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SaleCommitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_PaymentPanelLayout = new javax.swing.GroupLayout(pnl_PaymentPanel);
        pnl_PaymentPanel.setLayout(pnl_PaymentPanelLayout);
        pnl_PaymentPanelLayout.setHorizontalGroup(
            pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_PaymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(10, 10, 10)
                .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_AmountChange, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(txt_AmountDue)
                    .addComponent(txt_AmountPaid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(btn_SaleCommit)
                .addContainerGap())
        );
        pnl_PaymentPanelLayout.setVerticalGroup(
            pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_PaymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_AmountDue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txt_AmountPaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_PaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txt_AmountChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_SaleCommit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        pnl_SaleDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sale Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 18), new java.awt.Color(0, 0, 255))); // NOI18N

        tbl_SaleDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sale ID", "Product ID", "Product Name", "Price", "Quantity", "Subtotal", "Action"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_SaleDetail.setRowSelectionAllowed(false);
        tbl_SaleDetail.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl_SaleDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_SaleDetailMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_SaleDetail);

        javax.swing.GroupLayout pnl_SaleDetailPanelLayout = new javax.swing.GroupLayout(pnl_SaleDetailPanel);
        pnl_SaleDetailPanel.setLayout(pnl_SaleDetailPanelLayout);
        pnl_SaleDetailPanelLayout.setHorizontalGroup(
            pnl_SaleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SaleDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_SaleDetailPanelLayout.setVerticalGroup(
            pnl_SaleDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SaleDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_SalePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_PaymentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addComponent(pnl_SaleDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_SaleDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnl_SalePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnl_PaymentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AddToDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddToDetailActionPerformed
       
        DefaultTableModel model = (DefaultTableModel)tbl_SaleDetail.getModel();
        // clear jtable content
       
        Object[] row = new Object[7];
        
            row[0] = txt_SaleId.getText();
             
            if(cmb_Products.getSelectedIndex() != 0)
            {
                row[2] = cmb_Products.getSelectedItem();
            }
            else
            {
             JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Please select a valid product.");   
             cmb_Products.requestFocus();
             return;
            }
            row[3] = txt_Price.getText();
            
                
            boolean validInteger = DBUtils.checkValidInteger(txt_Quantity.getText());
            if(validInteger)
            {
                row[4] = txt_Quantity.getText();
            }
            else
            {
                JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Please enter a valid quantity in numbers.");   
                txt_Quantity.requestFocus();
                return;   
            }
          
            
            row[5] = txt_SubTotal.getText();
            
            Long saleId = Long.parseLong(txt_SaleId.getText());
            Long productId = idsVectorOfProducts.get(cmb_Products.getSelectedIndex()-1);        //as selected index starts from 1
            row[1] = productId;
            
            
            row[6] = "Delete";
            
            
            Action delete = new AbstractActionImpl(this.listOfSaleDetail);
 
            ButtonColumn buttonColumn = new ButtonColumn(tbl_SaleDetail, delete, 6);
            buttonColumn.setMnemonic(KeyEvent.VK_DELETE);
            
            
            model.addRow(row);            
            Double price = Double.parseDouble(txt_Price.getText());
            Long quantity = Long.parseLong(txt_Quantity.getText());
            Double subTotal = Double.parseDouble(txt_SubTotal.getText());
            
            SaleDetail saleDetail = new SaleDetail(saleId, productId, price, quantity, subTotal);
            int indexOfSaleDetailExisting = this.listOfSaleDetail.indexOf(saleDetail);
            
            if(indexOfSaleDetailExisting==-1)
            {   
                this.listOfSaleDetail.add(saleDetail);
            }
            else
            {
//             this.listOfSaleDetail.remove(indexOfSaleDetailExisting);
               removeSaleDetailFromCart(saleDetail);
               this.listOfSaleDetail.add(saleDetail);
            }
            
            calculateAmountDue();
            
              
            
            
            cmb_Products.setSelectedIndex(0);
            txt_Price.setText("");
            txt_Quantity.setText("");
            txt_SubTotal.setText("");
            btn_SaleCommit.setEnabled(true);
            
              
        
        
    }//GEN-LAST:event_btn_AddToDetailActionPerformed

    private void txt_QuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_QuantityActionPerformed
       
    }//GEN-LAST:event_txt_QuantityActionPerformed

    private void btn_SaleCommitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SaleCommitActionPerformed
        calculateChangeAmount();
        double amountChange = Double.parseDouble(txt_AmountChange.getText().equals("") ? "0":txt_AmountChange.getText());
        if(amountChange<0)
        {
            JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Please ask for Rs."+ -1*(amountChange)+"/- more.");   
            txt_AmountPaid.requestFocus();
            return; 
        }
        PointOfSaleService posService = new PointOfSaleService();
         Sales sale = new Sales();
         sale.setSaleId(Long.parseLong(txt_SaleId.getText()));   
         Long customerId = Long.valueOf(idsVectorOfCustomers.get(cmb_Customer.getSelectedIndex())+"");        
         Customer customer = new Customer();
         customer.setCustomerId(customerId);
         sale.setCustomer(customer);
         sale.setAmountPaid(Double.parseDouble(txt_AmountDue.getText()));
         System.out.println("user : " + LoginForm.getUser());
         sale.setUser(LoginForm.getUser());
        
        boolean result = posService.performSale(listOfSaleDetail, sale);     
        if(result)
        {
            txt_SaleId.setText(""+(posService.calculateSaleId()+1));
            JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Sale commited successfully.");
            printBill();
            clearCart();
        }
        else
        {
            JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Some error occured while committing sale.");
        }
        
        
    }//GEN-LAST:event_btn_SaleCommitActionPerformed

    private void cmb_ProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ProductsActionPerformed
      int index =   cmb_Products.getSelectedIndex()-1;  //leave first item title 
      if(index!=-1 && listOfProducts.size()>0)
      {
        Products selectedProduct =  listOfProducts.get(index);
        if(null != selectedProduct)
        {
            txt_Price.setText(selectedProduct.getPrice().toString());
            txt_Quantity.setText("");
            txt_SubTotal.setText("");
            PointOfSaleService service =  new PointOfSaleService();
            Long quantityAtHand = service.fetchQuantityAtHand(selectedProduct);
            Long remainingQuantity = quantityAtHand - 0;    //as quantity is not entered yet
            if(remainingQuantity>=0){
                lbl_RemainingQuantity.setText(remainingQuantity+"");
                btn_AddToDetail.setEnabled(true);
            }
            else{
                lbl_RemainingQuantity.setText("Product out of stock");
                btn_AddToDetail.setEnabled(false);
            }
            
        }
      }
      else
      {
            txt_Price.setText("");
      }
    }//GEN-LAST:event_cmb_ProductsActionPerformed

    private void txt_QuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_QuantityFocusLost
        // TODO add your handling code here:
 // TODO add your handling code here:
       
        calculateRemainingQuantity();
    }//GEN-LAST:event_txt_QuantityFocusLost

    private void txt_AmountPaidFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_AmountPaidFocusLost
            calculateChangeAmount();
              
    }//GEN-LAST:event_txt_AmountPaidFocusLost

    private void btn_ClearCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ClearCartActionPerformed
         clearCart();
    }//GEN-LAST:event_btn_ClearCartActionPerformed

    private void txt_AmountPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_AmountPaidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_AmountPaidActionPerformed

    private void tbl_SaleDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_SaleDetailMouseClicked
        // TODO add your handling code here:
        int index = tbl_SaleDetail.getSelectedRow();
        String saleId = tbl_SaleDetail.getModel().getValueAt(tbl_SaleDetail.convertRowIndexToModel(index),0).toString();
        String productId = tbl_SaleDetail.getModel().getValueAt(tbl_SaleDetail.convertRowIndexToModel(index),1).toString();
        showProductInFormFields(saleId, productId);
    }//GEN-LAST:event_tbl_SaleDetailMouseClicked

    private void txt_BarCodeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_BarCodeFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
//            cmb_ProductsActionPerformed
            //search product barcode in db
            StocksService stockService = new StocksService();
            Products product = stockService.findBarcodeProduct(txt_BarCodeField.getText());
            long quantityInCart = 1;
            //select product in combo
            if(product!=null && !"".equals(product.getProductId()))
            {
               cmb_Products.setSelectedIndex(listOfProducts.indexOf(product)+1);        // as please select item is at position 0 thats why +1 is required
               quantityInCart = calculateQuantityOfProductInCart(product.getProductId());
            }
            txt_Quantity.setText(quantityInCart+"");
            calculateRemainingQuantity();
            btn_AddToDetail.doClick();
            txt_BarCodeField.setText("");
            txt_BarCodeField.requestFocus();            
            //JOptionPane.showMessageDialog(pnl_SaleDetailPanel,"Product bar code. + " + txt_BarCodeField.getText());
            
        }
    }//GEN-LAST:event_txt_BarCodeFieldKeyPressed

    private void txt_BarCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BarCodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_BarCodeFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PointOfSaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PointOfSaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PointOfSaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PointOfSaleForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PointOfSaleForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private bill_system.Bill_system bill_system1;
    private javax.swing.JButton btn_AddToDetail;
    private javax.swing.JButton btn_ClearCart;
    private javax.swing.JButton btn_SaleCommit;
    private javax.swing.JComboBox cmb_Customer;
    private javax.swing.JComboBox cmb_Products;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_RemainingQuantity;
    private javax.swing.JPanel pnl_PaymentPanel;
    private javax.swing.JPanel pnl_SaleDetailPanel;
    private javax.swing.JPanel pnl_SalePanel;
    private javax.swing.JTable tbl_SaleDetail;
    private javax.swing.JTextField txt_AmountChange;
    private javax.swing.JTextField txt_AmountDue;
    private javax.swing.JTextField txt_AmountPaid;
    private javax.swing.JTextField txt_BarCodeField;
    private javax.swing.JTextField txt_Price;
    private javax.swing.JTextField txt_Quantity;
    private javax.swing.JTextField txt_SaleId;
    private javax.swing.JTextField txt_SubTotal;
    // End of variables declaration//GEN-END:variables

    private void clearSaleDetailTable() {
         DefaultTableModel dm = (DefaultTableModel)tbl_SaleDetail.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);    
        }
    }

    private void clearCart() {
        cmb_Customer.setSelectedIndex(0);
        cmb_Products.setSelectedIndex(0);
        txt_Price.setText("");
        txt_Quantity.setText("");
        lbl_RemainingQuantity.setText("");
        txt_SubTotal.setText("");
        
        txt_AmountDue.setText("");
        txt_AmountPaid.setText("");
        txt_AmountChange.setText("");
        
        listOfSaleDetail.clear();
        DBUtils.resetJTable(tbl_SaleDetail);
        btn_SaleCommit.setEnabled(false);
        txt_BarCodeField.setText("");
        txt_BarCodeField.requestFocus();
    }

    private void calculateChangeAmount() {
        Double amountPaid = txt_AmountPaid.getText().equals("")?0:Double.parseDouble(txt_AmountPaid.getText()) ;
        txt_AmountChange.setText((amountPaid - Double.parseDouble(txt_AmountDue.getText()))+"");
    }

    private void showProductInFormFields(String saleId, String productId) {
        if(productId != null && !"".equals(productId) )
        {
            Products product = new Products();
            product.setProductId(Long.parseLong(productId));
            
            SaleDetail saleDetail = new SaleDetail();
            saleDetail.setProduct(Long.parseLong(productId));
            saleDetail.setSale(Long.parseLong(saleId));
            
            cmb_Products.setSelectedIndex(listOfProducts.indexOf(product)+1);
            txt_Quantity.setText(listOfSaleDetail.get(listOfSaleDetail.indexOf(saleDetail)).getQuantity()+"");

            
            btn_AddToDetail.requestFocus();
        }

    }

    private void removeSaleDetailFromCart(SaleDetail saleDetail) {
        DefaultTableModel model = (DefaultTableModel)tbl_SaleDetail.getModel();
        model.removeRow(listOfSaleDetail.indexOf(saleDetail));
        this.listOfSaleDetail.remove(listOfSaleDetail.get(listOfSaleDetail.indexOf(saleDetail)));   //remove from cart and sent for updation
    }

    private void calculateRemainingQuantity() {

      if(!txt_Quantity.getText().isEmpty())
       {
        Long quantity = Long.parseLong(txt_Quantity.getText());
        Double price = Double.parseDouble(txt_Price.getText());
        txt_SubTotal.setText((quantity * price)+"");    
        PointOfSaleService service =  new PointOfSaleService();
         int index = cmb_Products.getSelectedIndex()-1;  //leave first item title 
        if (index != -1 && listOfProducts.size() > 0) {
            Products selectedProduct = listOfProducts.get(index);
            if (null != selectedProduct) {
                Long quantityAtHand = service.fetchQuantityAtHand(selectedProduct);
                Long orderedQuantity = Long.parseLong(txt_Quantity.getText()!=""?txt_Quantity.getText():"0");
                Long remainingQuantity = quantityAtHand - orderedQuantity;
                if(remainingQuantity>=0){
                    lbl_RemainingQuantity.setText(remainingQuantity+"");
                    btn_AddToDetail.setEnabled(true);
                }
                else{
                    lbl_RemainingQuantity.setText("Product out of stock");
                    btn_AddToDetail.setEnabled(false);
                }
                
            }
        }
        else
        {
            txt_SubTotal.setText("0");
        }
       
       
       }  
    }

    private long calculateQuantityOfProductInCart(Long productIdFromBarCode) {
        long quantity = 1;
        if(listOfSaleDetail!=null && listOfSaleDetail.size()>0){
            for (SaleDetail itemInCart : listOfSaleDetail) {
                
                if(itemInCart.getProduct().equals(productIdFromBarCode)){
                   quantity= itemInCart.getQuantity() + 1;
                }
                
            }
        }
        return quantity;
    }

    private void calculateAmountDue() {
        double amountDue = 0;
        if(listOfSaleDetail!=null && listOfSaleDetail.size()>0){
            for (SaleDetail itemInCart : listOfSaleDetail) {
                amountDue+= itemInCart.getSubTotal();
                
            }
            
        }
        txt_AmountDue.setText(amountDue +"");
    }

    private void printBill() {
         PrinterJob pj = PrinterJob.getPrinterJob();        
         BillPrintable billPrintable = new BillPrintable();
         billPrintable.txttotalAmount = txt_AmountDue.getText();
         billPrintable.txtcash = txt_AmountPaid.getText();
         billPrintable.txtbalance = txt_AmountChange.getText();
         billPrintable.setListOfSaleDetail(listOfSaleDetail);
         billPrintable.setListOfProducts(listOfProducts);
        pj.setPrintable(billPrintable,billPrintable.getPageFormat(pj));
        try {
             pj.print();
          
        }
         catch (PrinterException ex) {
                 ex.printStackTrace();
        }
    }
}
